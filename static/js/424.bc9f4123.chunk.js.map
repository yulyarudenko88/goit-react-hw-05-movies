{"version":3,"file":"static/js/424.bc9f4123.chunk.js","mappings":"8TAEaA,EAAsBC,EAAAA,GAAAA,EAAH,uHAOnBC,EAAcD,EAAAA,GAAAA,GAAH,gJAOXE,EAAkBF,EAAAA,GAAAA,GAAH,+J,GAMJA,EAAAA,GAAAA,GAAH,6RAaOA,EAAAA,GAAAA,GAAH,6KAQMA,EAAAA,GAAAA,IAAH,qFAMAA,EAAAA,GAAAA,EAAH,sDAIQA,EAAAA,GAAAA,EAAH,4C,QCK9B,EAjDqB,WACnB,OAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GAEX,IAAMI,EAAe,mCAAG,8GAEDC,EAAAA,EAAAA,IAAkBJ,GAFjB,OAEdK,EAFc,OAIpBR,EAAWQ,GACXN,GAAW,GALS,gDAOpBO,EAAAA,GAAAA,MACE,gFARkB,yDAAH,qDAYrBH,GACD,GAAE,CAACH,KAGF,gCACGF,IAAW,SAACS,EAAA,EAAD,KACVT,GAA8B,IAAnBF,EAAQY,SACnB,SAACjB,EAAD,kDAIAO,GAAWF,EAAQY,OAAS,IAC5B,SAACf,EAAD,UACGG,EAAQa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAAClB,EAAD,YAGE,2BACE,SAAC,MAAD,IADF,IACyBiB,MAEzB,6BAAKC,EAAL,SALKF,EAFI,QActB,C,mMCtDKG,EAAM,mCAGL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAA,sCAAyCF,IAD3D,cACCG,EADD,gBAEQA,EAASX,KAAKY,QAFtB,0GAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BlB,GAA9B,uFACkBe,EAAAA,EAAAA,IAAA,iBAAoBf,EAApB,oBAAuCa,EAAvC,oBADlB,cACCG,EADD,gBAEQA,EAASX,KAFjB,0GAKA,SAAec,EAAtB,+CAAO,OAAP,oBAAO,WAA8BnB,GAA9B,uFACkBe,EAAAA,EAAAA,IAAA,iBAAoBf,EAApB,4BAA+Ca,EAA/C,oBADlB,cACCG,EADD,gBAEQA,EAASX,KAFjB,0GAKA,SAAeD,EAAtB,+CAAO,OAAP,oBAAO,WAAiCJ,GAAjC,uFACkBe,EAAAA,EAAAA,IAAA,iBAAoBf,EAApB,4BAA+Ca,EAA/C,2BADlB,cACCG,EADD,gBAEQA,EAASX,KAAKY,QAFtB,0GAKA,SAAeG,EAAtB,kC,aAAO,O,oBAAA,WAAmCC,GAAnC,uFACkBN,EAAAA,EAAAA,IAAA,+BAAkCF,EAAlC,kBAA+CQ,EAA/C,+CADlB,cACCL,EADD,gBAEQA,EAASX,KAAKY,QAFtB,0GAtBPF,EAAAA,EAAAA,SAAAA,QAAA,8B","sources":["components/MovieReviews/MovieReviews.styled.js","components/MovieReviews/MovieReviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsDoesNotExist = styled.p`\n  max-width: calc(100vw - 48px);\n  font-size: 25px;\n  padding: 15px;\n  text-align: center;\n`;\n\nexport const ReviewsList = styled.ul`\n  max-width: calc(100vw - 48px);\n  padding: 15px 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const ReviewsListItem = styled.li`\n  margin-bottom: 8px;\n  padding: 4px 8px;\n  border: 2px solid rgb(80, 200, 120);\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2);\n`;\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  grid-gap: 20px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 15px 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastListItem = styled.li`\n  background-color: #50c878;\n  border: 1px #102818;\n  border-radius: 5px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n`;\n\nexport const ItemInfoWrapper = styled.div`\n  padding: 4px 8px;\n  color: white;\n  text-align: center;\n`;\n\nexport const ItemInfoName = styled.p`\n  text-transform: uppercase;\n`;\n\nexport const ItemInfoCharacter = styled.p`\n  font-size: 16px;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { FiCornerDownRight } from 'react-icons/fi';\nimport { toast } from 'react-toastify';\n\nimport { fetchMovieReviews } from 'services/api';\nimport Loader from 'components/Loader/Loader';\nimport { ReviewsList, ReviewsDoesNotExist, ReviewsListItem } from './MovieReviews.styled';\n\nconst MovieReviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n\n    const getMovieReviews = async () => {\n      try {\n        const data = await fetchMovieReviews(movieId);\n       \n        setReviews(data);\n        setLoading(false);\n      } catch (error) {\n        toast.error(\n          'Sorry for the inconvenience! Please try to use our service in a few minutes!'\n        );\n      }\n    };\n    getMovieReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {!loading && reviews.length === 0 && (\n        <ReviewsDoesNotExist>\n          Sorry, there are no reviews yet...\n        </ReviewsDoesNotExist>\n      )}\n      {!loading && reviews.length > 0 && (\n        <ReviewsList>\n          {reviews.map(({ id, author, content }) => (\n            <ReviewsListItem\n              key={id}              \n            >\n              <h3>\n                <FiCornerDownRight /> {author}\n              </h3>\n              <p>\"{content}\"</p>\n            </ReviewsListItem>\n          ))}\n        </ReviewsList>\n      )}\n    </>\n  );\n};\n\nexport default MovieReviews;\n","import axios from 'axios';\n\nconst KEY = 'f1b9f490c3f9fd9cec22fc21dcac3bcf';\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport async function fetchPopularMovies() {\n  const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return await response.data.results;\n}\n\nexport async function fetchMovieById(movieId) {\n  const response = await axios.get(`/movie/${movieId}?api_key=${KEY}&language=en-US`);\n  return await response.data;\n}\n\nexport async function fetchMovieCast(movieId) {\n  const response = await axios.get(`/movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n  return await response.data;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`);\n  return await response.data.results;\n}\n\nexport async function fetchMoviesBySearch(searchWord) {\n  const response = await axios.get(`search/movie?api_key=${KEY}&query=${searchWord}&language=en-US&page=1&include_adult=false`);\n  return await response.data.results;\n}\n\n// https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n"],"names":["ReviewsDoesNotExist","styled","ReviewsList","ReviewsListItem","useState","reviews","setReviews","loading","setLoading","movieId","useParams","useEffect","getMovieReviews","fetchMovieReviews","data","toast","Loader","length","map","id","author","content","KEY","fetchPopularMovies","axios","response","results","fetchMovieById","fetchMovieCast","fetchMoviesBySearch","searchWord"],"sourceRoot":""}