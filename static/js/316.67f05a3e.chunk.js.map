{"version":3,"file":"static/js/316.67f05a3e.chunk.js","mappings":"8SAEaA,EAAWC,EAAAA,GAAAA,GAAH,6RAaRC,EAAeD,EAAAA,GAAAA,GAAH,yOAaZE,EAAkBF,EAAAA,GAAAA,IAAH,qFAMfG,EAAeH,EAAAA,GAAAA,EAAH,sDAIZI,EAAoBJ,EAAAA,GAAAA,EAAH,6F,SC8B9B,EAtDkB,WAChB,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,GAEX,IAAMI,EAAY,mCAAG,8GAEEC,EAAAA,EAAAA,IAAeJ,GAFjB,OAEXK,EAFW,OAIjBR,EAAQQ,EAAKT,MACbG,GAAW,GALM,gDAOjBO,EAAAA,GAAAA,MACE,gFARe,yDAAH,qDAYlBH,GACD,GAAE,CAACH,KAGF,gCACGF,IAAW,SAACS,EAAA,EAAD,KACVT,GAAWF,EAAKY,OAAS,IACzB,SAACnB,EAAD,UACGO,EAAKa,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC/BC,EAAc,GASlB,OANEA,EADEH,EACS,yCAAqCA,GAG9C,6EAIF,UAACpB,EAAD,YACE,gBAAKwB,IAAKD,EAAaE,IAAKJ,KAC5B,UAACpB,EAAD,YACE,SAACC,EAAD,UAAemB,KACf,SAAClB,EAAD,UAAoBmB,SAJLH,EAQtB,QAKV,C,mMChEKO,EAAM,mCAGL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAA,sCAAyCF,IAD3D,cACCG,EADD,gBAEQA,EAASf,KAAKgB,QAFtB,0GAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BtB,GAA9B,uFACkBmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,oBAAuCiB,EAAvC,oBADlB,cACCG,EADD,gBAEQA,EAASf,KAFjB,0GAKA,SAAeD,EAAtB,+CAAO,OAAP,oBAAO,WAA8BJ,GAA9B,uFACkBmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,4BAA+CiB,EAA/C,oBADlB,cACCG,EADD,gBAEQA,EAASf,KAFjB,0GAKA,SAAekB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCvB,GAAjC,uFACkBmB,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,4BAA+CiB,EAA/C,2BADlB,cACCG,EADD,gBAEQA,EAASf,KAAKgB,QAFtB,0GAKA,SAAeG,EAAtB,kC,aAAO,O,oBAAA,WAAmCC,GAAnC,uFACkBN,EAAAA,EAAAA,IAAA,+BAAkCF,EAAlC,kBAA+CQ,EAA/C,+CADlB,cACCL,EADD,gBAEQA,EAASf,KAAKgB,QAFtB,0GAtBPF,EAAAA,EAAAA,SAAAA,QAAA,8B","sources":["components/MovieCast/MovieCast.styled.js","components/MovieCast/MovieCast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  grid-gap: 20px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 15px 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastListItem = styled.li`\n  background-color: #50c878;\n  border: 1px #102818;\n  border-radius: 5px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n\n  img {\n    height: 235px;\n    object-fit: cover;\n  }\n`;\n\nexport const ItemInfoWrapper = styled.div`\n  padding: 4px 8px;\n  color: white;\n  text-align: center;\n`;\n\nexport const ItemInfoName = styled.p`\n  text-transform: uppercase;\n`;\n\nexport const ItemInfoCharacter = styled.p`\n  text-transform: uppercase;\n  color: #102818;\n  font-size: 14px;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { fetchMovieCast } from 'services/api';\nimport Loader from 'components/Loader/Loader';\nimport {\n  CastList,\n  CastListItem,\n  ItemInfoWrapper,\n  ItemInfoName,\n  ItemInfoCharacter,\n} from './MovieCast.styled';\n\nconst MovieCast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n\n    const getMovieCast = async () => {\n      try {\n        const data = await fetchMovieCast(movieId);\n\n        setCast(data.cast);\n        setLoading(false);\n      } catch (error) {\n        toast.error(\n          'Sorry for the inconvenience! Please try to use our service in a few minutes!'\n        );\n      }\n    };\n    getMovieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {!loading && cast.length > 0 && (\n        <CastList>\n          {cast.map(({ id, profile_path, name, character }) => {\n            let profilePath = '';\n\n            if (profile_path) {\n              profilePath = `https://image.tmdb.org/t/p/w200${profile_path}`;\n            } else {\n              profilePath =\n                'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png';\n            }\n\n            return (\n              <CastListItem key={id}>\n                <img src={profilePath} alt={name} />\n                <ItemInfoWrapper>\n                  <ItemInfoName>{name}</ItemInfoName>\n                  <ItemInfoCharacter>{character}</ItemInfoCharacter>\n                </ItemInfoWrapper>\n              </CastListItem>\n            );\n          })}\n        </CastList>\n      )}\n    </>\n  );\n};\n\nexport default MovieCast;\n","import axios from 'axios';\n\nconst KEY = 'f1b9f490c3f9fd9cec22fc21dcac3bcf';\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport async function fetchPopularMovies() {\n  const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return await response.data.results;\n}\n\nexport async function fetchMovieById(movieId) {\n  const response = await axios.get(`/movie/${movieId}?api_key=${KEY}&language=en-US`);\n  return await response.data;\n}\n\nexport async function fetchMovieCast(movieId) {\n  const response = await axios.get(`/movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n  return await response.data;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`);\n  return await response.data.results;\n}\n\nexport async function fetchMoviesBySearch(searchWord) {\n  const response = await axios.get(`search/movie?api_key=${KEY}&query=${searchWord}&language=en-US&page=1&include_adult=false`);\n  return await response.data.results;\n}\n\n// https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n"],"names":["CastList","styled","CastListItem","ItemInfoWrapper","ItemInfoName","ItemInfoCharacter","useState","cast","setCast","loading","setLoading","movieId","useParams","useEffect","getMovieCast","fetchMovieCast","data","toast","Loader","length","map","id","profile_path","name","character","profilePath","src","alt","KEY","fetchPopularMovies","axios","response","results","fetchMovieById","fetchMovieReviews","fetchMoviesBySearch","searchWord"],"sourceRoot":""}