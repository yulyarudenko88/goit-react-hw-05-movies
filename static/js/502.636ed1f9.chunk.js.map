{"version":3,"file":"static/js/502.636ed1f9.chunk.js","mappings":"gOAGaA,EAAgBC,EAAAA,GAAAA,GAAH,uSAebC,GAAYD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,wQ,SCStB,EAtB0B,SAAC,GAAiD,IAA/CG,EAA8C,EAA9CA,GAAIC,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACtDC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACV,EAAD,WACE,UAACE,EAAD,CAAWS,GAAE,UAAKH,GAAL,OAAcJ,GAAMQ,MAAOH,EAAxC,WACE,gBAAKI,IAAKR,EAAYS,IAAKR,KAC3B,uBAAIC,QAIX,ECdYQ,EAAad,EAAAA,GAAAA,GAAH,6RCqCvB,EAjCsB,SAAC,GAAwB,IAAtBe,EAAqB,EAArBA,OAAQR,EAAa,EAAbA,OAC/B,OACE,SAACO,EAAD,UACGC,EAAOC,KAAI,YAA2C,IAAxCb,EAAuC,EAAvCA,GAAIG,EAAmC,EAAnCA,MAAOW,EAA4B,EAA5BA,YAAaZ,EAAe,EAAfA,SACjCD,EAAa,GASjB,OANEA,EADEa,EACQ,0CAAsCA,GAG9C,yEAIF,SAAC,EAAD,CAEEd,GAAIA,EACJC,WAAYA,EACZC,SAAUA,EACVC,MAAOA,EACPC,OAAQA,GALHJ,EAQV,KAGN,C,wJC9BYe,E,QAAQlB,GAAAA,GAAH,oE,SCQlB,EANkB,SAAC,GAAD,IAAGmB,EAAH,EAAGA,SAAH,OAAkB,SAACD,EAAD,UAAQC,GAA1B,E,UCsClB,EAnCa,WACX,OAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,mCAAG,8GAEFC,EAAAA,EAAAA,MAFE,OAEfC,EAFe,OAGrBJ,EAAiBI,GAHI,gDAKrBC,EAAAA,GAAAA,MACE,gFANmB,yDAAH,qDAUtBH,GACD,GAAE,KAGD,gCACGH,IAAkB,KACjB,SAAC,EAAD,2FAKDA,EAAcO,OAAS,IACtB,iCACE,SAAC,EAAD,8BACA,SAACC,EAAA,EAAD,CAAed,OAAQM,EAAed,OAAM,iBAKrD,C,mMCtCKuB,EAAM,mCAGL,SAAeL,IAAtB,4CAAO,OAAP,oBAAO,oGACkBM,EAAAA,EAAAA,IAAA,sCAAyCD,IAD3D,cACCE,EADD,gBAEQA,EAASN,KAAKO,QAFtB,0GAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACkBJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAuCL,EAAvC,oBADlB,cACCE,EADD,gBAEQA,EAASN,KAFjB,0GAKA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,uFACkBJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,4BAA+CL,EAA/C,oBADlB,cACCE,EADD,gBAEQA,EAASN,KAFjB,0GAKA,SAAeW,EAAtB,+CAAO,OAAP,oBAAO,WAAiCF,GAAjC,uFACkBJ,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,4BAA+CL,EAA/C,2BADlB,cACCE,EADD,gBAEQA,EAASN,KAAKO,QAFtB,0GAKA,SAAeK,EAAtB,kC,aAAO,O,oBAAA,WAAmCC,GAAnC,uFACkBR,EAAAA,EAAAA,IAAA,+BAAkCD,EAAlC,kBAA+CS,EAA/C,+CADlB,cACCP,EADD,gBAEQA,EAASN,KAAKO,QAFtB,0GAtBPF,EAAAA,EAAAA,SAAAA,QAAA,8B","sources":["components/MoviesGalleryItem/MoviesGalleryItem.styled.js","components/MoviesGalleryItem/MoviesGalleryItem.jsx","components/MoviesGallery/MoviesGallery.styled.js","components/MoviesGallery/MoviesGallery.jsx","components/MainTitle/MainTitle.styked.js","components/MainTitle/MainTitle.jsx","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieListItem = styled.li`\n  background-color: #50c878;\n\n  border-radius: 5px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  cursor: pointer;\n  text-decoration: none;\n\n  img {\n    display: block;\n    height: 445px;\n    object-fit: cover;\n  }\n\n  p {\n    padding: 4px 8px;\n    color: white;\n    text-transform: uppercase;\n    text-align: center;\n  }\n`;\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MovieListItem, MovieLink } from './MoviesGalleryItem.styled';\n\nconst MoviesGalleryItem = ({ id, posterPath, overview, title, pathTo }) => {\n  const location = useLocation();\n\n  return (\n    <MovieListItem>\n      <MovieLink to={`${pathTo}${id}`} state={location}>\n        <img src={posterPath} alt={overview} />\n        <p>{title}</p>\n      </MovieLink>\n    </MovieListItem>\n  );\n};\n\n\nMoviesGalleryItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  posterPath: PropTypes.string.isRequired,\n  overview: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  pathTo: PropTypes.string.isRequired,\n};\n\nexport default MoviesGalleryItem;\n","import styled from \"styled-components\";\n\nexport const MoviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  grid-gap: 20px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 15px 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport MoviesGalleryItem from 'components/MoviesGalleryItem/MoviesGalleryItem';\nimport { MoviesList } from './MoviesGallery.styled';\n\nconst MoviesGallery = ({ movies, pathTo }) => {\n  return (\n    <MoviesList>\n      {movies.map(({ id, title, poster_path, overview }) => {\n        let posterPath = '';\n\n        if (poster_path) {\n          posterPath = `https://image.tmdb.org/t/p/w400/${poster_path}`;\n        } else {\n          posterPath =\n            'https://cdn.pixabay.com/photo/2012/04/18/23/29/film-38241_960_720.png';\n        }\n\n        return (\n          <MoviesGalleryItem\n            key={id}\n            id={id}\n            posterPath={posterPath}\n            overview={overview}\n            title={title} \n            pathTo={pathTo}           \n          />\n        );\n      })}\n    </MoviesList>\n  );\n};\n\nMoviesGallery.propTypes = {\n  movies: PropTypes.array,\n  pathTo: PropTypes.string.isRequired,\n};\n\nexport default MoviesGallery;\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin-top: 12px;\n  text-align: center;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from './MainTitle.styked';\n\nconst MainTitle = ({ children }) => <Title>{children}</Title>;\n\nMainTitle.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default MainTitle;\n","import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { fetchPopularMovies } from 'services/api';\nimport MainTitle from 'components/MainTitle/MainTitle';\nimport MoviesGallery from 'components/MoviesGallery/MoviesGallery';\n\nconst Home = () => {\n  const [popularMovies, setPopularMovies] = useState([]);\n\n  useEffect(() => {\n    const getPopularMovies = async () => {\n      try {\n        const data = await fetchPopularMovies();\n        setPopularMovies(data);\n      } catch (error) {\n        toast.error(\n          'Sorry for the inconvenience! Please try to use our service in a few minutes!'\n        );\n      }\n    };\n    getPopularMovies();\n  }, []);\n\n  return (\n    <>\n      {popularMovies === [] && (\n        <MainTitle>\n          Sorry for the inconvenience! Please try to use our service in a few\n          minutes!\n        </MainTitle>\n      )}\n      {popularMovies.length > 0 && (\n        <>\n          <MainTitle>Trending Today</MainTitle>\n          <MoviesGallery movies={popularMovies} pathTo={`movies/`} />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst KEY = 'f1b9f490c3f9fd9cec22fc21dcac3bcf';\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport async function fetchPopularMovies() {\n  const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return await response.data.results;\n}\n\nexport async function fetchMovieById(movieId) {\n  const response = await axios.get(`/movie/${movieId}?api_key=${KEY}&language=en-US`);\n  return await response.data;\n}\n\nexport async function fetchMovieCast(movieId) {\n  const response = await axios.get(`/movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n  return await response.data;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios.get(`/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`);\n  return await response.data.results;\n}\n\nexport async function fetchMoviesBySearch(searchWord) {\n  const response = await axios.get(`search/movie?api_key=${KEY}&query=${searchWord}&language=en-US&page=1&include_adult=false`);\n  return await response.data.results;\n}\n\n// https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n"],"names":["MovieListItem","styled","MovieLink","Link","id","posterPath","overview","title","pathTo","location","useLocation","to","state","src","alt","MoviesList","movies","map","poster_path","Title","children","useState","popularMovies","setPopularMovies","useEffect","getPopularMovies","fetchPopularMovies","data","toast","length","MoviesGallery","KEY","axios","response","results","fetchMovieById","movieId","fetchMovieCast","fetchMovieReviews","fetchMoviesBySearch","searchWord"],"sourceRoot":""}